{"version":3,"sources":["reportWebVitals.ts","utils/variables.ts","utils/functions.ts","features/citiesWeather/weatherSlice.ts","config/store.ts","config/api.ts","features/citiesWeather/weatherAPI.ts","components/ui/inputCity.tsx","features/citiesWeather/actions.ts","components/Header.tsx","components/MainContainer.tsx","hooks/redux.ts","components/ForecastRow.tsx","components/Forecast.tsx","components/ui/WeatherError.tsx","components/ui/icons/icons.tsx","components/ui/WeatherAdditionalInfo.tsx","components/WeatherCard.tsx","components/WeatherCards.tsx","components/ui/preloader/preloader.tsx","components/T.js","components/pages/weatherWidgets.tsx","MainApp.tsx","index.tsx","components/ui/preloader/preloader.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","keyLS","toCelsius","temperature","result","toFixed","capitalize","line","charAt","toUpperCase","slice","getIconURL","iconCode","weatherSlice","createSlice","name","initialState","citiesWeather","forecast","isLoading","error","reducers","deleteCity","state","payload","filteredCities","filter","city","setCity","citiesLS","JSON","parse","localStorage","getItem","concat","setItem","stringify","addCityToLocalStorage","setCityFromLS","setErrorAxiosError","response","data","message","setError","toggleLoading","updateCityData","map","id","setForecastCity","getForecastDayTime","list","item","dt_txt","actions","store","configureStore","reducer","weather","instance","axios","create","baseURL","process","REACT_APP_API_URL","interceptors","request","use","axiosConfig","params","q","appid","REACT_APP_API_KEY","cityWeatherAPI","cityName","get","InputCity","useState","inputState","setInputState","disable","setDisable","dispatch","useDispatch","sendCityName","a","includes","borderLeftRadius","bgColor","size","color","borderRightRadius","placeholder","value","onChange","e","target","onClick","length","disabled","Header","paddingX","paddingY","justify","align","display","isExternal","href","padding","MainContainer","children","minW","minH","as","position","top","zIndex","useAppSelector","useSelector","ForecastRow","dayWeather","index","main","tempMin","temp_min","tempMax","temp_max","dayOfWeek","moment","substring","format","temperatureMin","temperatureMax","weatherDescription","description","weatherIcon","icon","iconURL","fontSize","h","src","alt","Forecast","useEffect","window","scrollTo","behavior","mappedDaysForecast","dayForecast","daysForecast","useMemo","initialScale","in","borderRadius","borderColor","border","margin","textAlign","WeatherError","textDecoration","DropIcon","createIcon","displayName","viewBox","path","fillRule","d","WeatherAdditionalInfo","feelsLike","speed","humidity","feels","windSpeed","airHumidity","marginTop","Card","update","forecastCity","toggle","setToggle","temp","feels_like","sys","wind","currentDate","utcOffset","timezone","date","join","getForecast","stopPropagation","flexDirection","direction","isTruncated","country","alignItems","marginX","colorScheme","MemoizedCard","memo","Cards","updateData","deleteCityCard","key","deleteValue","filteredDate","deleteFromLocalStorage","getForecastCity","mappedCards","cards","maxW","Preloader","className","style","ldsRing","TelegramLoginButton","props","this","botName","buttonSize","cornerRadius","requestAccess","usePic","dataOnauth","dataAuthUrl","lang","widgetVersion","TelegramLoginWidget","user","script","document","createElement","setAttribute","undefined","async","appendChild","ref","component","React","Component","defaultProps","WeatherWidgets","preload","setPreload","loadLocalStorageCity","setTimeout","T","console","log","right","w","left","App","exact","render","to","MainApp","StrictMode","ReactDOM","getElementById","module","exports"],"mappings":"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","file":"static/js/main.45541e11.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const keyLS = 'cities';\n","import { keyLS } from './variables';\n\nexport const toCelsius = (temperature: number): string => {\n  const result = (temperature - 273.15).toFixed(0);\n  return `${result}°`;\n};\n\nexport const capitalize = (line: string): string => line.charAt(0).toUpperCase() + line.slice(1);\n\nexport const deleteFromLocalStorage = (key:string, deleteValue:string): void => {\n  const arrayValues: string[] = JSON.parse(localStorage.getItem(keyLS) || '[]');\n  const filteredDate = arrayValues.filter((value) => value !== deleteValue);\n  localStorage.setItem(key, JSON.stringify(filteredDate));\n};\n\nexport const addCityToLocalStorage = (city: string): void => {\n  const citiesLS: string[] = JSON.parse(localStorage.getItem(keyLS) || '[]');\n  const concat = [city].concat(citiesLS);\n  localStorage.setItem(keyLS, JSON.stringify(concat));\n};\n\nexport const getIconURL = (iconCode: string): string => `http://openweathermap.org/img/w/${iconCode}.png`;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AxiosError } from 'axios';\nimport { addCityToLocalStorage } from '../../utils/functions';\nimport {\n  CurrentDataCityWeatherType, ForecastCityType,\n} from './types';\n\nexport interface CitiesWeatherState {\n  citiesWeather:CurrentDataCityWeatherType[],\n  forecast: ForecastCityType,\n  isLoading: boolean,\n  error: string\n}\n\nconst initialState: CitiesWeatherState = {\n  citiesWeather: [],\n  forecast: {} as ForecastCityType,\n  isLoading: false,\n  error: '',\n};\n\nexport const weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n\n    deleteCity: (state, { payload }: PayloadAction<string>) => {\n      const filteredCities = state.citiesWeather.filter((city) => city.name !== payload);\n      state.citiesWeather = filteredCities;\n    },\n\n    setCity: (state, { payload }: PayloadAction<CurrentDataCityWeatherType>) => {\n      state.isLoading = false;\n      state.error = '';\n      addCityToLocalStorage(payload.name);\n      state.citiesWeather = [payload].concat(state.citiesWeather);\n    },\n\n    setCityFromLS: (state, { payload }: PayloadAction<CurrentDataCityWeatherType>) => {\n      state.isLoading = false;\n      state.error = '';\n      state.citiesWeather = [payload].concat(state.citiesWeather);\n    },\n\n    setErrorAxiosError: (state, { payload }: PayloadAction<AxiosError>) => {\n      state.isLoading = false;\n      state.error = payload.response ? payload.response.data.message : 'Unknown error';\n    },\n\n    setError: (state, { payload }: PayloadAction<string>) => {\n      state.error = payload;\n    },\n\n    toggleLoading: (state, { payload }: PayloadAction<boolean>) => {\n      state.isLoading = payload;\n    },\n\n    updateCityData: (state, { payload }: PayloadAction<CurrentDataCityWeatherType>) => {\n      state.isLoading = false;\n      state.error = '';\n      state.citiesWeather = state.citiesWeather\n        .map((city) => ((city.id === payload.id) ? payload : city));\n    },\n\n    setForecastCity: (state, { payload }: PayloadAction<ForecastCityType>) => {\n      state.isLoading = false;\n      state.error = '';\n      const getForecastDayTime = payload.list.filter((item) => item.dt_txt[12] === '5');\n\n      state.forecast = { ...payload, list: getForecastDayTime };\n    },\n  },\n});\n\nexport const {\n  deleteCity,\n  setCity,\n  toggleLoading,\n  setError,\n  updateCityData,\n} = weatherSlice.actions;\n\nexport default weatherSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport weather from '../features/citiesWeather/weatherSlice';\n\nexport const store = configureStore({\n  reducer: {\n    weather,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import axios, { AxiosRequestConfig } from 'axios';\n\nexport const instance = axios.create({\n  baseURL: `${process.env.REACT_APP_API_URL}`,\n});\n\ninstance.interceptors.request.use((axiosConfig: AxiosRequestConfig) => {\n  const { city } = axiosConfig.params;\n\n  const params = {\n    q: city,\n    appid: `${process.env.REACT_APP_API_KEY}`,\n  };\n\n  return { ...axiosConfig, params };\n},\n(error) => error);\n","import { instance } from '../../config/api';\nimport { CurrentWeatherResponseType, ForecastCityResponseType } from './types';\n\nexport const cityWeatherAPI = {\n\n  currentWeather(cityName: string):CurrentWeatherResponseType {\n    return (\n      instance.get('weather', {\n        params: {\n          city: cityName,\n        },\n      })\n    );\n  },\n\n  forecast(cityName: string): ForecastCityResponseType {\n    return (\n      instance.get('forecast', {\n        params: {\n          city: cityName,\n        },\n      })\n    );\n  },\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { FC, useState } from 'react';\nimport {\n  Button,\n  Input,\n  Flex,\n  Box,\n} from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { getCityWeather } from '../../features/citiesWeather/actions';\nimport { setError } from '../../features/citiesWeather/weatherSlice';\n\nexport const InputCity: FC = () => {\n  const [inputState, setInputState] = useState('');\n  const [disable, setDisable] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const setValue = (e: any) => {\n    setInputState(e.target.value);\n  };\n\n  const sendCityName = () => {\n    setDisable(() => true);\n    dispatch(getCityWeather(inputState));\n    setInputState('');\n    setDisable(() => false);\n  };\n\n  const addCity = () => {\n    if (inputState.length < 2) {\n      return dispatch(setError('city name too short'));\n    }\n    return sendCityName();\n  };\n\n  return (\n    <Box>\n      <Flex>\n        <Box borderLeftRadius=\"xl\" bgColor=\"gray.300\">\n          <Input\n            size=\"sm\"\n            color=\"gray.700\"\n            borderRightRadius=\"none\"\n            placeholder=\"City Name\"\n            value={inputState}\n            onChange={setValue}\n          />\n        </Box>\n        <Button\n          size=\"sm\"\n          color=\"gray.700\"\n          borderLeftRadius=\"none\"\n          onClick={addCity}\n          disabled={disable}\n        >\n          search\n        </Button>\n      </Flex>\n    </Box>\n  );\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { AppDispatch } from '../../config/store';\nimport { keyLS } from '../../utils/variables';\nimport { cityWeatherAPI } from './weatherAPI';\nimport { weatherSlice } from './weatherSlice';\n\nexport const getCityWeather = (city: string) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(weatherSlice.actions.toggleLoading(true));\n    const response = await cityWeatherAPI.currentWeather(city);\n    const cities: string[] = JSON.parse(localStorage.getItem(keyLS) || '[]');\n    if (cities.includes(response.data.name)) {\n      dispatch(weatherSlice.actions.updateCityData(response.data));\n    } else {\n      dispatch(weatherSlice.actions.setCity(response.data));\n    }\n  } catch (e: any) {\n    dispatch(weatherSlice.actions.setErrorAxiosError(e));\n  }\n};\n\nexport const loadLocalStorageCity = (city: string) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(weatherSlice.actions.toggleLoading(true));\n\n    const response = await cityWeatherAPI.currentWeather(city);\n    dispatch(weatherSlice.actions.setCityFromLS(response.data));\n  } catch (e: any) {\n    dispatch(weatherSlice.actions.setErrorAxiosError(e));\n  }\n};\n\nexport const updateCityWeather = (city: string) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(weatherSlice.actions.toggleLoading(true));\n\n    const response = await cityWeatherAPI.currentWeather(city);\n    dispatch(weatherSlice.actions.toggleLoading(true));\n\n    dispatch(weatherSlice.actions.updateCityData(response.data));\n  } catch (e: any) {\n    dispatch(weatherSlice.actions.setError(e));\n  }\n};\n\nexport const getForecastCity = (city: string) => async (dispatch: AppDispatch) => {\n  try {\n    dispatch(weatherSlice.actions.toggleLoading(true));\n\n    const response = await cityWeatherAPI.forecast(city);\n    dispatch(weatherSlice.actions.setForecastCity(response.data));\n  } catch (e: any) {\n    dispatch(weatherSlice.actions.setErrorAxiosError(e));\n  }\n};\n","import { FC } from 'react';\nimport {\n  Box, Flex, Heading, Link,\n} from '@chakra-ui/react';\nimport { InputCity } from './ui/inputCity';\n\nexport const Header: FC = () => (\n  <Flex\n    paddingX={['1', '6']}\n    paddingY={['1', '2', 'none']}\n    bgColor=\"#262624\"\n    color=\"#c7c3b9\"\n    justify=\"space-between\"\n    align=\"center\"\n  >\n    <Box display={['none', 'block']}>\n      <Link\n        isExternal\n        href=\"https://cv.djinni.co/fe/19ab4e344c6c49451e5ae4dabbe56a/PiloianCV.pdf\"\n      >\n        toCV\n      </Link>\n    </Box>\n    <Heading\n      size=\"md\"\n      padding=\"1%\"\n      align=\"center\"\n    >\n      Weather\n    </Heading>\n    <InputCity />\n  </Flex>\n);\n","import { FC, ReactChild } from 'react';\nimport { Box } from '@chakra-ui/react';\nimport { Header } from './Header';\n\ntype PropsType = {\n  children: ReactChild\n};\nexport const MainContainer: FC<PropsType> = ({ children }:PropsType) => (\n  <Box\n    bgColor=\"#d9d6d0\"\n    minW=\"280px\"\n    minH=\"100vh\"\n  >\n    <Box\n      as=\"header\"\n      position=\"sticky\"\n      top=\"0\"\n      zIndex=\"9999\"\n    >\n      <Header />\n    </Box>\n    <Box as=\"main\">\n\n      {children}\n    </Box>\n  </Box>\n);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../config/store';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { FC } from 'react';\nimport {\n  Box,\n  Flex,\n  Heading,\n  Text,\n  Image,\n} from '@chakra-ui/react';\nimport moment from 'moment';\nimport { ForecastItemType } from '../features/citiesWeather/types';\nimport { capitalize, getIconURL, toCelsius } from '../utils/functions';\n\ntype PropsType = {\n  dayWeather: ForecastItemType\n  index: number\n};\n\nexport const ForecastRow: FC<PropsType> = ({ dayWeather, index }:PropsType) => {\n  const {\n    temp_min: tempMin,\n    temp_max: tempMax,\n  } = dayWeather.main;\n  const date = moment(dayWeather.dt_txt.substring(0, 10));\n  const dayOfWeek = date.format('dddd');\n\n  const temperatureMin = toCelsius(tempMin);\n  const temperatureMax = toCelsius(tempMax);\n  const weatherDescription = capitalize(dayWeather.weather[0].description);\n  const weatherIcon = dayWeather.weather[0].icon;\n  const iconURL = getIconURL(weatherIcon);\n\n  return (\n    <Flex\n      paddingX=\"2\"\n      bgColor={(index % 2 === 0) ? '#d9d6d0' : ''}\n      justify=\"space-between\"\n      align=\"center\"\n    >\n      <Box>\n        <Heading size=\"sm\">\n          {dayOfWeek}\n        </Heading>\n        <Text fontSize=\"0.75rem\" color=\"gray.700\">\n          {weatherDescription}\n        </Text>\n      </Box>\n      <Box>\n        <Image h=\"100%\" src={iconURL} alt={weatherDescription} />\n      </Box>\n      <Box>\n        <Text>\n          {temperatureMax}\n        </Text>\n        <Text>\n          {temperatureMin}\n        </Text>\n      </Box>\n    </Flex>\n  );\n};\n","import { FC, useEffect, useMemo } from 'react';\nimport { Box, Heading, ScaleFade } from '@chakra-ui/react';\nimport { ForecastCityType } from '../features/citiesWeather/types';\nimport { ForecastRow } from './ForecastRow';\n\ntype PropsType = {\n  data: ForecastCityType\n};\n\nexport const Forecast: FC<PropsType> = ({ data }: PropsType) => {\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, [data]);\n\n  const mappedDaysForecast = data.list.map((dayForecast, index) => (\n    <ForecastRow\n      index={index}\n      key={dayForecast.dt_txt}\n      dayWeather={dayForecast}\n    />\n  ));\n\n  const daysForecast = useMemo(() => mappedDaysForecast, [data.list]);\n  return (\n    <ScaleFade\n      initialScale={0.8}\n      in\n    >\n      <Box minW={['none', null, '400px']}>\n        <Box\n          borderRadius=\"md\"\n          borderColor=\"gray.700\"\n          border=\"1px\"\n          bgColor=\"white\"\n          margin=\"2\"\n          padding=\"2\"\n        >\n          <Heading textAlign=\"center\" size=\"md\">\n            Forecast\n            {' '}\n            {data.city.name}\n          </Heading>\n          {daysForecast}\n        </Box>\n      </Box>\n    </ScaleFade>\n  );\n};\n","import { FC } from 'react';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { useAppSelector } from '../../hooks/redux';\n\nexport const WeatherError: FC = () => {\n  const error = useAppSelector((state) => state.weather.error);\n\n  return (\n    <Box\n      display={error ? 'block' : 'none'}\n    >\n      <Heading textDecoration=\"underline\" textAlign=\"center\" size=\"sm\" color=\"red.500\">\n        {error}\n      </Heading>\n    </Box>\n  );\n};\n","import { createIcon } from '@chakra-ui/react';\n\nexport const DropIcon = createIcon({\n  displayName: 'DropIcon',\n  viewBox: '0 0 20 20',\n  path: (\n    <g>\n      <path\n        fillRule=\"evenodd\"\n        d=\"M7.21.8C7.69.295 8 0 8 0c.109.363.234.708.371 1.038.812 1.946 2.073 3.35 3.197 4.6C12.878 7.096 14 8.345 14 10a6 6 0 0 1-12 0C2 6.668 5.58 2.517 7.21.8zm.413 1.021A31.25 31.25 0 0 0 5.794 3.99c-.726.95-1.436 2.008-1.96 3.07C3.304 8.133 3 9.138 3 10a5 5 0 0 0 10 0c0-1.201-.796-2.157-2.181-3.7l-.03-.032C9.75 5.11 8.5 3.72 7.623 1.82z\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        d=\"M4.553 7.776c.82-1.641 1.717-2.753 2.093-3.13l.708.708c-.29.29-1.128 1.311-1.907 2.87l-.894-.448z\"\n      />\n    </g>\n  ),\n});\n","import { Flex, Text } from '@chakra-ui/react';\nimport { FC } from 'react';\nimport { toCelsius } from '../../utils/functions';\nimport { DropIcon } from './icons/icons';\n\ntype PropsType = {\n  feelsLike: number,\n  speed: number,\n  humidity: number\n};\n\nexport const WeatherAdditionalInfo: FC<PropsType> = ({\n  feelsLike,\n  speed,\n  humidity,\n}:PropsType) => {\n  const feels = `Feels like: ${toCelsius(feelsLike)}`;\n  const windSpeed = `Wind: ${speed} m/sec`;\n  const airHumidity = `${humidity} %`;\n\n  return (\n    <Flex\n      marginTop=\"1\"\n      padding={['2', '4']}\n      borderRadius=\"xl\"\n      bgColor=\"#404040\"\n      justify=\"space-between\"\n    >\n      <Flex align=\"center\">\n        <DropIcon />\n        <Text fontSize={['xs', 'md']}>\n          {airHumidity}\n        </Text>\n      </Flex>\n      <Text fontSize={['xs', 'md']}>\n        {windSpeed}\n      </Text>\n      <Text fontSize={['xs', 'md']}>\n        {feels}\n      </Text>\n    </Flex>\n  );\n};\n","import {\n  FC, memo, MouseEvent, useState,\n} from 'react';\nimport {\n  Box, Button, Flex, Text, Heading, Image,\n} from '@chakra-ui/react';\nimport moment from 'moment';\nimport { CurrentDataCityWeatherType } from '../features/citiesWeather/types';\nimport { capitalize, getIconURL, toCelsius } from '../utils/functions';\nimport { WeatherAdditionalInfo } from './ui/WeatherAdditionalInfo';\n\ntype PropsType = {\n  city: CurrentDataCityWeatherType,\n  update: (cityName: string) => void;\n  deleteCity: (cityName: string) => void;\n  forecastCity: (cityName: string) => void;\n};\n\nconst Card: FC<PropsType> = ({\n  city, update, deleteCity, forecastCity,\n}: PropsType) => {\n  const [toggle, setToggle] = useState(false);\n  const { temp, humidity, feels_like: feelsLike } = city.main;\n  const {\n    weather,\n    name: cityName,\n    sys,\n    wind,\n  } = city;\n\n  const currentDate = moment().utcOffset(city.timezone / 60);\n  const dayOfWeek = currentDate.format('dddd');\n  const date = currentDate.format('DD MMM YYYY');\n\n  const temperature = toCelsius(temp);\n\n  const weatherDescription = capitalize(weather.map((item) => item.description).join(', '));\n\n  const iconURL = getIconURL(weather[0].icon);\n  const switcher = () => setToggle(!toggle);\n\n  const updateData = (e: MouseEvent) => {\n    e.stopPropagation();\n    update(cityName);\n  };\n  const deleteCityCard = (e: MouseEvent) => {\n    e.stopPropagation();\n    deleteCity(city.name);\n  };\n\n  const getForecast = async (e: MouseEvent) => {\n    e.stopPropagation();\n    forecastCity(city.name);\n  };\n\n  return (\n    <Box minW={['280px', 'none', '400px', '550px']}>\n      <Flex\n        color=\"#e8e3e3\"\n        borderRadius=\"2xl\"\n        onClick={switcher}\n        margin=\"2\"\n        padding=\"4\"\n        flexDirection=\"column\"\n        bgColor=\"#242323\"\n      >\n        <Box\n          padding=\"4\"\n          borderRadius=\"xl\"\n          bgColor=\"#404040\"\n        >\n          <Flex direction={['column', 'row']} justify=\"space-between\">\n            <Box align=\"center\">\n              <Heading isTruncated>\n                {cityName}\n              </Heading>\n              <Text>\n                {sys.country}\n              </Text>\n            </Box>\n            <Box display={['none', 'block']}>\n              <Image h=\"100%\" src={iconURL} alt={weatherDescription} />\n            </Box>\n            <Box align=\"center\">\n              <Heading size=\"lg\">\n                {dayOfWeek}\n              </Heading>\n              <Text>\n                {date}\n              </Text>\n            </Box>\n          </Flex>\n\n          <Flex justify=\"space-around\" alignItems=\"center\">\n            <Heading size=\"2xl\">\n              {temperature}\n            </Heading>\n          </Flex>\n          <Heading isTruncated size=\"md\" textAlign=\"center\">\n            {weatherDescription}\n          </Heading>\n        </Box>\n        {toggle\n          ? (\n            <WeatherAdditionalInfo\n              speed={wind.speed}\n              feelsLike={feelsLike}\n              humidity={humidity}\n            />\n          )\n          : null}\n\n        <Flex color=\"#242323\" marginTop=\"2\" justify=\"space-around\" align=\"center\">\n          <Button onClick={getForecast}>\n            forecast\n          </Button>\n          <Button marginX=\"2\" onClick={updateData}>\n            update\n          </Button>\n          <Button\n            onClick={deleteCityCard}\n            colorScheme=\"red\"\n          >\n            delete\n          </Button>\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\n\nexport const MemoizedCard = memo(Card);\n","import {\n  FC,\n  useMemo,\n} from 'react';\nimport { Box, ScaleFade } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { getForecastCity, updateCityWeather } from '../features/citiesWeather/actions';\nimport { deleteCity } from '../features/citiesWeather/weatherSlice';\nimport { deleteFromLocalStorage } from '../utils/functions';\nimport { keyLS } from '../utils/variables';\nimport { MemoizedCard } from './WeatherCard';\nimport { useAppSelector } from '../hooks/redux';\n\nexport const Cards: FC = () => {\n  const citiesWeather = useAppSelector((state) => state.weather.citiesWeather);\n\n  const dispatch = useDispatch();\n\n  const updateData = (cityName: string) => {\n    dispatch(updateCityWeather(cityName));\n  };\n\n  const deleteCityCard = (cityName: string) => {\n    dispatch(deleteCity(cityName));\n    deleteFromLocalStorage(keyLS, cityName);\n  };\n\n  const forecastCity = (city: string) => {\n    dispatch(getForecastCity(city));\n  };\n\n  const mappedCards = citiesWeather.map((city) => (\n    <ScaleFade\n      key={`scale_${city.id}`}\n      initialScale={0.8}\n      in\n    >\n      <MemoizedCard\n        deleteCity={deleteCityCard}\n        key={city.id}\n        update={updateData}\n        city={city}\n        forecastCity={forecastCity}\n      />\n    </ScaleFade>\n  ));\n\n  const cards = useMemo(() => mappedCards, [citiesWeather]);\n  return (\n    <Box maxW={['100%', '100%', '500px']}>\n      {cards}\n    </Box>\n  );\n};\n","import { FC } from 'react';\nimport style from './preloader.module.css';\n\nexport const Preloader: FC = () => (\n  <div className={style.ldsRing}>\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n","/* eslint-disable react/default-props-match-prop-types */\n/* eslint-disable react/require-default-props */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/prop-types */\n/* eslint-disable @typescript-eslint/no-useless-constructor */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TelegramLoginButton extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const {\n      botName,\n      buttonSize,\n      cornerRadius,\n      requestAccess,\n      usePic,\n      dataOnauth,\n      dataAuthUrl,\n      lang,\n      widgetVersion,\n    } = this.props;\n    window.TelegramLoginWidget = {\n      dataOnauth: (user) => dataOnauth(user),\n    };\n\n    const script = document.createElement('script');\n    script.src = `https://telegram.org/js/telegram-widget.js?${widgetVersion}`;\n    script.setAttribute('data-telegram-login', botName);\n    script.setAttribute('data-size', buttonSize);\n    if (cornerRadius !== undefined) {\n      script.setAttribute('data-radius', cornerRadius);\n    }\n    script.setAttribute('data-request-access', requestAccess);\n    script.setAttribute('data-userpic', usePic);\n    script.setAttribute('data-lang', lang);\n    if (dataAuthUrl !== undefined) {\n      script.setAttribute('data-auth-url', dataAuthUrl);\n    } else {\n      script.setAttribute(\n        'data-onauth',\n        'TelegramLoginWidget.dataOnauth(user)',\n      );\n    }\n    script.async = true;\n    this.instance.appendChild(script);\n  }\n\n  render() {\n    return (\n      <div\n        className={this.props.className}\n        ref={(component) => {\n          this.instance = component;\n        }}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nTelegramLoginButton.propTypes = {\n  botName: PropTypes.string,\n  dataOnauth: PropTypes.func,\n  buttonSize: PropTypes.oneOf(['large', 'medium', 'small']),\n  cornerRadius: PropTypes.number,\n  requestAccess: PropTypes.string,\n  usePic: PropTypes.bool,\n  lang: PropTypes.string,\n  widgetVersion: PropTypes.number,\n};\n\nTelegramLoginButton.defaultProps = {\n  botName: 'SCHart_bot',\n  dataOnauth: () => undefined,\n  buttonSize: 'large',\n  requestAccess: 'write',\n  usePic: true,\n  lang: 'en',\n  widgetVersion: 9,\n};\n\nexport default TelegramLoginButton;\n","/* eslint-disable max-len */\nimport {\n  FC,\n  useEffect,\n  useState,\n} from 'react';\nimport { Box, Flex } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../hooks/redux';\nimport { keyLS } from '../../utils/variables';\nimport {\n  loadLocalStorageCity,\n} from '../../features/citiesWeather/actions';\nimport { Forecast } from '../Forecast';\nimport { WeatherError } from '../ui/WeatherError';\nimport { Cards } from '../WeatherCards';\nimport { Preloader } from '../ui/preloader/preloader';\nimport TelegramLoginButton from '../T';\n\nexport const WeatherWidgets: FC = () => {\n  const { forecast, isLoading } = useAppSelector((state) => state.weather);\n  const [preload, setPreload] = useState(isLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const citiesLS: string[] = JSON.parse(localStorage.getItem(keyLS) || '[]');\n\n    if (citiesLS.length) {\n      citiesLS.map((city) => dispatch(loadLocalStorageCity(city)));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isLoading) {\n      setPreload(true);\n      setTimeout(() => setPreload(false),\n        500);\n    }\n  }, [isLoading]);\n\n  const onTelegramAuth = (user:any) => {\n    console.log(user);\n  };\n  return (\n    <Box>\n      <TelegramLoginButton dataOnauth={onTelegramAuth} />\n\n      <Flex\n        position=\"fixed\"\n        top={['12', '20']}\n        right=\"2\"\n        zIndex=\"999\"\n      >\n        <WeatherError />\n      </Flex>\n      <Box\n        w=\"100%\"\n        position=\"fixed\"\n        top=\"20\"\n        left=\"40%\"\n        zIndex=\"999\"\n      >\n        {preload ? <Preloader /> : null}\n      </Box>\n      <Flex\n        direction={['column', null, 'row']}\n        justify=\"space-around\"\n      >\n        <Box maxW={['100%', null, '550px']}>\n          {(JSON.stringify(forecast) !== '{}')\n            ? <Forecast data={forecast} />\n            : null}\n        </Box>\n        <Cards />\n      </Flex>\n    </Box>\n  );\n};\n","import React, { FC } from 'react';\nimport { HashRouter, Redirect } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { Route, Switch } from 'react-router';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { store } from './config/store';\nimport { MainContainer } from './components/MainContainer';\nimport { WeatherWidgets } from './components/pages/weatherWidgets';\n\nexport const App: FC = () => (\n  <MainContainer>\n    <Switch>\n      <Route exact path=\"/\" render={() => <Redirect to=\"/weather-widgets\" />} />\n      <Route path=\"/weather-widgets\" render={() => <WeatherWidgets />} />\n    </Switch>\n  </MainContainer>\n);\n\nexport const MainApp: FC = () => (\n  <React.StrictMode>\n    <ChakraProvider>\n      <HashRouter>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </HashRouter>\n    </ChakraProvider>\n  </React.StrictMode>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport { MainApp } from './MainApp';\n\nReactDOM.render(\n  <MainApp />,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRing\":\"preloader_ldsRing__LoOns\",\"lds-ring\":\"preloader_lds-ring__1VxQT\"};"],"sourceRoot":""}